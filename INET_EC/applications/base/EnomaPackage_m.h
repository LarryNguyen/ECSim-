//
// Generated file, do not edit! Created by nedtool 5.1 from inet/applications/base/EnomaPackage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_ENOMAPACKAGE_M_H
#define __INET_ENOMAPACKAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

/**
 * Class generated from <tt>inet/applications/base/EnomaPackage.msg:9</tt> by nedtool.
 * <pre>
 * //
 * // Generic application packet
 * //
 * packet EnomaPackage
 * {
 *     //SP_REQUEST = 1, ENOMA_REQUEST = 2, EDGE_UPDATE_ST=3
 *     int msgType;
 *     //IP of UE
 *     string ueIp;
 *     //Service name
 *     string sp;
 *     //size of service container
 *     int size;
 *     //size of service Cache
 *     int cacheSize;
 *     //mips
 *     int mips;
 *     //List of Edge Service should be install in Edge Node
 *     string listEdgeService;
 *     string nodeName; //eg. Egde1, Edge2...
 * }
 * </pre>
 */
class INET_API EnomaPackage : public ::omnetpp::cPacket
{
  protected:
    int msgType;
    ::omnetpp::opp_string ueIp;
    ::omnetpp::opp_string sp;
    int size;
    int cacheSize;
    int mips;
    ::omnetpp::opp_string listEdgeService;
    ::omnetpp::opp_string nodeName;

  private:
    void copy(const EnomaPackage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EnomaPackage&);

  public:
    EnomaPackage(const char *name=nullptr, short kind=0);
    EnomaPackage(const EnomaPackage& other);
    virtual ~EnomaPackage();
    EnomaPackage& operator=(const EnomaPackage& other);
    virtual EnomaPackage *dup() const override {return new EnomaPackage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
    virtual const char * getUeIp() const;
    virtual void setUeIp(const char * ueIp);
    virtual const char * getSp() const;
    virtual void setSp(const char * sp);
    virtual int getSize() const;
    virtual void setSize(int size);
    virtual int getCacheSize() const;
    virtual void setCacheSize(int cacheSize);
    virtual int getMips() const;
    virtual void setMips(int mips);
    virtual const char * getListEdgeService() const;
    virtual void setListEdgeService(const char * listEdgeService);
    virtual const char * getNodeName() const;
    virtual void setNodeName(const char * nodeName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EnomaPackage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EnomaPackage& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ENOMAPACKAGE_M_H

