//
// Generated file, do not edit! Created by nedtool 5.1 from inet_bk/applications/voipstream/VoIPStreamPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_VOIPSTREAMPACKET_M_H
#define __INET_VOIPSTREAMPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
#ifndef HAVE_FFMPEG
#error Please install libavcodec, libavformat, libavutil or disable 'VoIPStream' feature.
#endif

#include "inet/common/ByteArray.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>inet_bk/applications/voipstream/VoIPStreamPacket.msg:33</tt> by nedtool.
 * <pre>
 * //
 * // For the type field of VoIPPacket
 * //
 * enum VoIPStreamPacketType
 * {
 * 
 *     VOICE = 1;
 *     SILENCE = 2;
 * }
 * </pre>
 */
enum VoIPStreamPacketType {
    VOICE = 1,
    SILENCE = 2
};

/**
 * Class generated from <tt>inet_bk/applications/voipstream/VoIPStreamPacket.msg:44</tt> by nedtool.
 * <pre>
 * //
 * // Packet type used by VoIPSourceApp and VoIPSinkApp
 * //
 * packet VoIPStreamPacket
 * {
 *     int type \@enum(VoIPStreamPacketType);
 * 
 *     int codec;  // FFmpeg identifier of the codec
 *     short sampleBits;
 *     int sampleRate;
 *     int transmitBitrate;
 *     int samplesPerPacket;
 *     ByteArray bytes;
 * 
 *     uint16_t seqNo; // packet sequence number
 *     uint32_t timeStamp; // increased with every packet
 *     uint32_t ssrc;  // currently unused
 * }
 * </pre>
 */
class INET_API VoIPStreamPacket : public ::omnetpp::cPacket
{
  protected:
    int type;
    int codec;
    short sampleBits;
    int sampleRate;
    int transmitBitrate;
    int samplesPerPacket;
    ByteArray bytes;
    uint16_t seqNo;
    uint32_t timeStamp;
    uint32_t ssrc;

  private:
    void copy(const VoIPStreamPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VoIPStreamPacket&);

  public:
    VoIPStreamPacket(const char *name=nullptr, short kind=0);
    VoIPStreamPacket(const VoIPStreamPacket& other);
    virtual ~VoIPStreamPacket();
    VoIPStreamPacket& operator=(const VoIPStreamPacket& other);
    virtual VoIPStreamPacket *dup() const override {return new VoIPStreamPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getCodec() const;
    virtual void setCodec(int codec);
    virtual short getSampleBits() const;
    virtual void setSampleBits(short sampleBits);
    virtual int getSampleRate() const;
    virtual void setSampleRate(int sampleRate);
    virtual int getTransmitBitrate() const;
    virtual void setTransmitBitrate(int transmitBitrate);
    virtual int getSamplesPerPacket() const;
    virtual void setSamplesPerPacket(int samplesPerPacket);
    virtual ByteArray& getBytes();
    virtual const ByteArray& getBytes() const {return const_cast<VoIPStreamPacket*>(this)->getBytes();}
    virtual void setBytes(const ByteArray& bytes);
    virtual uint16_t getSeqNo() const;
    virtual void setSeqNo(uint16_t seqNo);
    virtual uint32_t getTimeStamp() const;
    virtual void setTimeStamp(uint32_t timeStamp);
    virtual uint32_t getSsrc() const;
    virtual void setSsrc(uint32_t ssrc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VoIPStreamPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VoIPStreamPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_VOIPSTREAMPACKET_M_H

